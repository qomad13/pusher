from scapy.all import sniff, DHCP, IP, Ether
import logging
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª –∏ –≤ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("dhcp_sniffer.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

# Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
BOT_TOKEN = "7647395031:AAEoTDPCdSApCk9nQ9D0qARgPIro9Thn62E"
CHAT_ID = "-1002511183701"

# –•—Ä–∞–Ω–∏–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
known_devices = {}

def send_message(text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {"chat_id": CHAT_ID, "text": text}
        requests.post(url, data=payload)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

def dhcp_sniffer(packet):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç DHCP-–ø–∞–∫–µ—Ç—ã"""
    if packet.haslayer(DHCP) and packet.haslayer(Ether):
        mac_address = packet[Ether].src  # MAC —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        ip_address = packet[IP].src if packet.haslayer(IP) else "0.0.0.0"  # IP (–µ—Å–ª–∏ –µ—Å—Ç—å)
        dhcp_options = packet[DHCP].options  # –û–ø—Ü–∏–∏ DHCP

        # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π DHCP-–ø–∞–∫–µ—Ç
        logging.info(f"üì° DHCP-–∑–∞–ø—Ä–æ—Å: MAC={mac_address}, IP={ip_address}, –û–ø—Ü–∏–∏={dhcp_options}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–∞–∫–µ—Ç–∞
        dhcp_types = {1: "Discover", 2: "Offer", 3: "Request", 4: "Decline", 5: "ACK", 6: "NAK", 7: "Release", 8: "Inform"}
        dhcp_message_type = next((opt[1] for opt in dhcp_options if isinstance(opt, tuple) and opt[0] == "message-type"), None)
        dhcp_type = dhcp_types.get(dhcp_message_type, "Unknown")

        # –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–æ–≤–æ–µ –∏–ª–∏ IP —Å–º–µ–Ω–∏–ª—Å—è
        if mac_address not in known_devices or known_devices[mac_address] != ip_address:
            known_devices[mac_address] = ip_address
            logging.info(f"üîó {dhcp_type}: MAC={mac_address}, IP={ip_address}")
            send_message(f"üì° {dhcp_type} –æ–±–Ω–∞—Ä—É–∂–µ–Ω: MAC={mac_address}, IP={ip_address}")

        # –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–∏–ª–æ—Å—å
        if dhcp_type == "Release":
            logging.info(f"üö™ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã—à–ª–æ: MAC={mac_address}, IP={ip_address}")
            send_message(f"üö™ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ: {mac_address} –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ç—å")
            known_devices.pop(mac_address, None)  # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞

# –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Å–Ω–∏—Ñ—Ñ–∏–Ω–≥
logging.info("üì° –ó–∞–ø—É—Å–∫ DHCP-—Å–Ω–∏—Ñ—Ñ–µ—Ä–∞ (–ª–æ–≤–∏–º –ø–∞–∫–µ—Ç—ã –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)...")
sniff(filter="port 67 or port 68", prn=dhcp_sniffer, store=0)
