import time
import requests
from scapy.all import ARP, Ether, srp
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞ (–∏–ª–∏ –∫–∞–Ω–∞–ª–∞)
BOT_TOKEN = "7647395031:AAEoTDPCdSApCk9nQ9D0qARgPIro9Thn62E"
CHAT_ID = "-1002511183701"

# MAC-–∞–¥—Ä–µ—Å —Ç–≤–æ–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
TARGET_MAC = "62:dc:4a:76:49:77"  # –ó–∞–º–µ–Ω–∏–ª –Ω–∞ —Ç–≤–æ–π MAC-–∞–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞

# –í—Ä–µ–º—è, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è "–Ω–µ –¥–æ–º–∞", –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ
MAX_MISSING_TIME = 20  # –Ω–∞–ø—Ä–∏–º–µ—Ä, 10 —Å–µ–∫—É–Ω–¥

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Wi-Fi —Å –ø–æ–º–æ—â—å—é scapy
def check_wifi():
    # IP-–¥–∏–∞–ø–∞–∑–æ–Ω —Å–µ—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 192.168.0.0/24)
    target_ip = "192.168.0.0/24"  # –ò—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ—é –ø–æ–¥—Å–µ—Ç—å

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å ARP –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∏
    arp_request = ARP(pdst=target_ip)
    broadcast = Ether(dst="ff:ff:ff:ff:ff:ff")  # –®–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω—ã–π MAC-–∞–¥—Ä–µ—Å
    arp_request_broadcast = broadcast/arp_request

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã
    answered_list = srp(arp_request_broadcast, timeout=1, verbose=False)[0]

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö MAC-–∞–¥—Ä–µ—Å–æ–≤
    found_devices = []
    for element in answered_list:
        mac_address = element[1].hwsrc
        ip_address = element[1].psrc
        logging.info(f"–ù–∞–π–¥–µ–Ω–Ω—ã–π MAC-–∞–¥—Ä–µ—Å: {mac_address} - IP-–∞–¥—Ä–µ—Å: {ip_address}")
        found_devices.append(mac_address)

    return found_devices  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö MAC-–∞–¥—Ä–µ—Å–æ–≤

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
def send_message(text):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": text}
    requests.post(url, data=payload)

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
last_state = None  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å (–î–æ–º–∞/–ù–µ –¥–æ–º–∞)
last_found_devices = []  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è MAC-–∞–¥—Ä–µ—Å–æ–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

while True:
    logging.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.")
    found_devices = check_wifi()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Å–µ—Ç–∏
    if TARGET_MAC in found_devices:
        if last_state != "home":
            send_message("üì≤ –¢—ã –ø—Ä–∏—à–µ–ª –¥–æ–º–æ–π!")
            logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: üì≤ –¢—ã –ø—Ä–∏—à–µ–ª –¥–æ–º–æ–π!")
            last_state = "home"
        last_found_devices = found_devices  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

    elif last_state != "away":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ
        if last_found_devices:
            missing_time = 0
            while missing_time < MAX_MISSING_TIME:
                time.sleep(1)
                missing_time += 1
                found_devices = check_wifi()
                if TARGET_MAC in found_devices:
                    break
            if missing_time >= MAX_MISSING_TIME:
                send_message("üö™ –¢—ã —É—à–µ–ª –∏–∑ –¥–æ–º–∞.")
                logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: üö™ –¢—ã —É—à–µ–ª –∏–∑ –¥–æ–º–∞.")
                last_state = "away"
        else:
            # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ä–∞–∑—É
            send_message("üö™ –¢—ã —É—à–µ–ª –∏–∑ –¥–æ–º–∞.")
            logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: üö™ –¢—ã —É—à–µ–ª –∏–∑ –¥–æ–º–∞.")
            last_state = "away"

    logging.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {last_state}")
    time.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ 10 —Å–µ–∫—É–Ω–¥
